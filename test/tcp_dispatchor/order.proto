syntax = "proto3";
option cc_generic_services = true;

message makeOrderRequest {
  int32 price = 1;
  string goods = 2;
}

message makeOrderResponse {
  int32 ret_code = 1;
  string res_info = 2;
  string order_id = 3;
}

service Order {
  rpc makeOrder(makeOrderRequest) returns (makeOrderResponse);
}

// 1. 注册OrderService 对象 （启动的时候就初始化
// 2. 从 buffer 中读取数据，然后decode得到自定义协议，然后将请求的来的自定义协议得到method_name, 从OrderServcie中跟据方法名得到方法 func
// 3. 根据方法找到对应的request type 和 response 类型
// 4. 将请求体中的协议反序列化成 request type的对象，声明一个空的response type 对象
// 5. func(request, response);
// 6. 将reponse 对象化得到的数据，塞入到协议中，再编码得塞到encode里面，发送回包